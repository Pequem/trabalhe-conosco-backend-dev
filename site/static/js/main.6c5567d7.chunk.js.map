{"version":3,"sources":["Header.js","SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["Header","this","props","db","n","dbStatusColor","dbStatus","dbStatusStyle","color","fontWeigth","react_default","a","createElement","className","style","Component","SearchBox","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","field","nResults","results","pag","handleField","bind","assertThisInitialized","handleButton","handlePagButton","event","setState","target","value","_this2","search","_this3","keyword","from","requestUri","length","fetch","crossDomain","method","headers","Content-type","then","response","json","reponseJson","header","total","content","console","log","table","forEach","item","indice","push","key","id","name","username","Exception","_this4","_this5","createTable","htmlFor","type","onChange","placeholder","onClick","App","nImports","dbCheck","status","parseInt","catch","setInterval","Header_Header","SearchBox_SearchBox","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6c5567d7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Header.css';\n\nexport default class Header extends Component {\n  render() {\n      let n = \"\";\n      if(this.props.db == 1){\n        n = this.props.n;\n      }\n      let db = this.props.db;\n      let dbStatus = \"none\";\n      let dbStatusColor;\n      if(db === 0){\n        dbStatus = \"Not Ready\";\n        dbStatusColor = 'white';\n      }else if(db === 1){\n          dbStatus = \"Importing\";\n          dbStatusColor = 'white'\n      }else if(db === 2){\n          dbStatus = \"Ready\";\n          dbStatusColor = \"white\";\n      }else{\n        dbStatusColor = \"red\";\n          dbStatus = \"Unknown\";\n      }\n      const dbStatusStyle = {\n          color: dbStatusColor,\n          fontWeigth: 'bolder'\n      };\n    return (\n      <header className=\"header\">\n        <div className=\"header-logo\">\n            Teste PicPay BackEnd\n        </div>\n        <div className=\"header-info\">\n            ElasticSearch Status: <span style={dbStatusStyle}>{dbStatus}</span>\n        </div>\n      </header>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './SearchBox.css';\n\nexport default class SearchBox extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            field : '',\n            nResults: 0,\n            results: [],\n            pag: 1\n        }\n        this.handleField = this.handleField.bind(this);\n        this.handleButton = this.handleButton.bind(this);\n        this.handlePagButton = this.handlePagButton.bind(this);\n    }\n\n    handleField(event){\n        this.setState({field: event.target.value});\n    }\n\n    handleButton(){\n        this.setState({\n            pag: 1\n        }, () => {\n            this.search();\n        });\n    }\n\n    search(){\n        //if(this.props.db != 2){\n        //    alert(\"DB dont ready\");\n        //    return;\n        //}\n        let keyword = this.state.field;\n        let from = this.state.pag;\n        let requestUri = \"http://localhost:3100/users\"\n        if(keyword.length > 0){\n            requestUri += \"?name=\" + keyword;\n            requestUri += \"&from=\" + --from*15;\n        }else{\n            requestUri += \"?from=\" + --from*15;\n        }\n        fetch(requestUri, {\n            crossDomain: true,\n            method: 'GET',\n            headers: {'Content-type': 'application/json'}\n            })\n            .then((response) => {\n            return response.json()})\n            .then((reponseJson) => {\n                let nResults = reponseJson.header.total;\n                let results = reponseJson.content;\n                if(nResults === 0){\n                    results = []\n                }\n                this.setState({\n                    nResults: nResults,\n                    results: results\n                });\n                console.log(this.state.results);\n            }\n        )\n    }\n\n    createTable(){\n        let table = [];\n        try{\n            this.state.results.forEach(\n                (item, indice) => {\n                    table.push(\n                        <tr key={item.id}>\n                            <td>{item.id}</td>\n                            <td>{item.name}</td>\n                            <td>{item.username}</td>\n                        </tr>\n                    )\n                }\n            );\n        }catch(Exception){\n\n        }\n        return table;\n    }\n\n    handlePagButton(value){\n        let pag = this.state.pag;\n        pag += value;\n        if(pag < 1){\n            pag = 1;\n        }\n        if(this.state.nResults <= pag*15){\n            return;\n        }\n        if(value == -2){\n            pag = 1;\n        }\n        if(value == 2){\n            pag = 665;\n        }\n        this.setState({\n            pag:pag,\n        }, () => {\n            this.search();\n        })\n    }\n\n    render() {\n        let table = this.createTable();\n        return (\n        <div className=\"se\">\n            <div className=\"se-content\">\n                <div className=\"se-input\">\n                    <label htmlFor=\"inp\" className=\"inp\">\n                        <input type=\"text\" id=\"inp\" value={this.state.field} onChange={this.handleField} placeholder=\"&nbsp;\" />\n                        <span className=\"label\">Search</span>\n                        <span className=\"border\"></span>\n                    </label>\n                    <button onClick={this.handleButton}>\n                        Search\n                    </button>\n                </div>\n                <div className=\"table\">\n                    <table>\n                        <tbody>\n                            <tr>\n                                <th>ID</th>\n                                <th>Name</th>\n                                <th>Username</th>\n                            </tr>\n                            {table}\n                        </tbody>\n                    </table>\n                </div>\n                <div className=\"rodape\">\n                    Number of results: {this.state.nResults}\n                    <div className=\"pagination\">\n                        <button onClick={() => this.handlePagButton(-2)}>&lt;&lt;</button>\n                        <button onClick={() => this.handlePagButton(-1)}>&lt;</button>\n                        {this.state.pag}\n                        <button onClick={() => this.handlePagButton(1)}>&gt;</button>\n                        <button onClick={() => this.handlePagButton(2)}>&gt;&gt;</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        );\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Headers from './Header'\nimport SearchBox from './SearchBox';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      db : 8,\n      nImports: 0\n    }\n    this.dbCheck = this.dbCheck.bind(this);\n  }\n\n  dbCheck(){\n    fetch('http://localhost:3100/dbstatus', {\n      crossDomain: true,\n      method: 'GET',\n      headers: {'Content-type': 'application/json'}\n    })\n    .then((response) => {\n      return response.json()})\n    .then((reponseJson) => {\n      let status = parseInt(reponseJson.status);\n      let n = 0;\n      if(status == 1){\n        n = reponseJson.n;\n      }\n      this.setState({\n        db: status,\n        nImports: n\n      });\n    }).catch(() => \n      {\n        this.setState({\n          db: 8\n        });\n      }\n    )\n  }\n\n  componentDidMount(){\n    var db = setInterval((event) => {\n      this.dbCheck();\n    }, 1000);\n  }\n\n  render() {\n    return (\n      <section className=\"app\">\n        <Headers db={this.state.db} n={this.state.nImports} />\n        <SearchBox db={this.state.db} />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}