{"version":3,"sources":["Header.js","InputText.js","SearchBox.js","Auth.js","App.js","serviceWorker.js","index.js"],"names":["Header","this","props","db","n","dbStatusColor","dbStatus","dbStatusStyle","color","fontWeigth","react_default","a","createElement","className","style","Component","InputText","htmlFor","type","id","value","onChange","handleInput","onKeyDown","handleEnter","placeholder","label","SearchBox","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","field","nResults","results","pag","handleField","bind","assertThisInitialized","handleButton","handlePagButton","handleInputEnter","event","setState","target","_this2","search","_this3","keyword","from","requestUri","serverURI","length","fetch","crossDomain","method","headers","Content-type","then","response","json","reponseJson","header","total","content","console","log","alert","table","forEach","item","indice","push","key","name","username","Exception","_this4","keyCode","_this5","_this6","createTable","InputText_InputText","onClick","Auth","email","pass","inputEmailHandle","inputPassHandle","inputUriHandle","inputHandleEnter","handleButtonClick","changeUri","requestAuth","handleAuth","uri","App","nImports","token","dbCheck","handleChangeUri","status","parseInt","catch","data","FormData","append","accept","mode","body","setInterval","Header_Header","SearchBox_SearchBox","Auth_Auth","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.48b6ac6f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Header.css';\r\n\r\nexport default class Header extends Component {\r\n  render() {\r\n      let n = \"\";\r\n      if(this.props.db == 1){\r\n        n = this.props.n;\r\n      }\r\n      let db = this.props.db;\r\n      let dbStatus = \"none\";\r\n      let dbStatusColor;\r\n      if(db === 0){\r\n        dbStatus = \"Not Ready\";\r\n        dbStatusColor = 'white';\r\n      }else if(db === 1){\r\n          dbStatus = \"Importing\";\r\n          dbStatusColor = 'white'\r\n      }else if(db === 2){\r\n          dbStatus = \"Ready\";\r\n          dbStatusColor = \"white\";\r\n      }else{\r\n        dbStatusColor = \"red\";\r\n          dbStatus = \"Unknown\";\r\n      }\r\n      const dbStatusStyle = {\r\n          color: dbStatusColor,\r\n          fontWeigth: 'bolder'\r\n      };\r\n    return (\r\n      <header className=\"header\">\r\n        <div className=\"header-logo\">\r\n            Teste PicPay BackEnd\r\n        </div>\r\n        <div className=\"header-info\">\r\n            ElasticSearch Status: <span style={dbStatusStyle}>{dbStatus}</span>\r\n        </div>\r\n      </header>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport './InputText.css';\r\n\r\nexport default class InputText extends Component {\r\n    render() {\r\n        return (\r\n            <label htmlFor=\"inp\" className=\"it-inp\">\r\n                <input type=\"text\" className=\"it-input\" id=\"inp\" value={this.props.value} onChange={this.props.handleInput} onKeyDown={this.props.handleEnter} placeholder=\"&nbsp;\" />\r\n                <span className=\"it-label\">{this.props.label}</span>\r\n                <span className=\"it-border\"></span>\r\n            </label>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './SearchBox.css';\r\nimport InputText from './InputText';\r\n\r\nexport default class SearchBox extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            field : '',\r\n            nResults: 0,\r\n            results: [],\r\n            pag: 1\r\n        }\r\n        this.handleField = this.handleField.bind(this);\r\n        this.handleButton = this.handleButton.bind(this);\r\n        this.handlePagButton = this.handlePagButton.bind(this);\r\n        this.handleInputEnter = this.handleInputEnter.bind(this);\r\n    }\r\n\r\n    handleField(event){\r\n        this.setState({field: event.target.value});\r\n    }\r\n\r\n    handleButton(){\r\n        this.setState({\r\n            pag: 1\r\n        }, () => {\r\n            this.search();\r\n        });\r\n    }\r\n\r\n    search(){\r\n        if(this.props.db != 2){\r\n            alert(\"DB dont ready\");\r\n            return;\r\n        }\r\n        let keyword = this.state.field;\r\n        let from = this.state.pag;\r\n        let requestUri = this.props.serverURI+\"users\";\r\n        if(keyword.length > 0){\r\n            requestUri += \"?name=\" + keyword;\r\n            requestUri += \"&from=\" + --from*15;\r\n        }else{\r\n            requestUri += \"?from=\" + --from*15;\r\n        }\r\n        fetch(requestUri, {\r\n            crossDomain: true,\r\n            method: 'GET',\r\n            headers: {'Content-type': 'application/json'}\r\n            })\r\n            .then((response) => {\r\n            return response.json()})\r\n            .then((reponseJson) => {\r\n                let nResults = reponseJson.header.total;\r\n                let results = reponseJson.content;\r\n                if(nResults === 0){\r\n                    results = []\r\n                }\r\n                this.setState({\r\n                    nResults: nResults,\r\n                    results: results\r\n                });\r\n                console.log(this.state.results);\r\n            }\r\n        )\r\n    }\r\n\r\n    createTable(){\r\n        let table = [];\r\n        try{\r\n            this.state.results.forEach(\r\n                (item, indice) => {\r\n                    table.push(\r\n                        <tr key={item.id}>\r\n                            <td>{item.id}</td>\r\n                            <td>{item.name}</td>\r\n                            <td>{item.username}</td>\r\n                        </tr>\r\n                    )\r\n                }\r\n            );\r\n        }catch(Exception){\r\n\r\n        }\r\n        return table;\r\n    }\r\n\r\n    handleInputEnter(event){\r\n        if(event.keyCode == 13){\r\n            this.setState({\r\n                pag:1\r\n            }, () => {\r\n                this.search();\r\n            })\r\n        }\r\n    }\r\n\r\n    handlePagButton(value){\r\n        let pag = this.state.pag;\r\n        pag += value;\r\n        if(pag < 1){\r\n            pag = 1;\r\n        }\r\n        if(this.state.nResults <= pag*15){\r\n            return;\r\n        }\r\n        if(value == -2){\r\n            pag = 1;\r\n        }\r\n        if(value == 2){\r\n            pag = 665;\r\n        }\r\n        this.setState({\r\n            pag:pag,\r\n        }, () => {\r\n            this.search();\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let table = this.createTable();\r\n        return (\r\n        <div className=\"se\">\r\n            <div className=\"se-content\">\r\n                <div className=\"se-input\">\r\n                    <InputText handleInput={this.handleField} value={this.state.field} handleEnter={this.handleInputEnter} label=\"Search\"/>\r\n                    <button onClick={this.handleButton}>\r\n                        Search\r\n                    </button>\r\n                </div>\r\n                <div className=\"table\">\r\n                    <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>ID</th>\r\n                                <th>Name</th>\r\n                                <th>Username</th>\r\n                            </tr>\r\n                            {table}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div className=\"rodape\">\r\n                    Number of results: {this.state.nResults}\r\n                    <div className=\"pagination\">\r\n                        <button onClick={() => this.handlePagButton(-2)}>&lt;&lt;</button>\r\n                        <button onClick={() => this.handlePagButton(-1)}>&lt;</button>\r\n                        {this.state.pag}\r\n                        <button onClick={() => this.handlePagButton(1)}>&gt;</button>\r\n                        <button onClick={() => this.handlePagButton(2)}>&gt;&gt;</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        );\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport './Auth.css';\r\nimport InputText from './InputText';\r\n\r\nexport default class Auth extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = ({\r\n            email: \"\",\r\n            pass: \"\"\r\n        })\r\n        this.inputEmailHandle = this.inputEmailHandle.bind(this);\r\n        this.inputPassHandle = this.inputPassHandle.bind(this);\r\n        this.inputUriHandle = this.inputUriHandle.bind(this);\r\n        this.inputHandleEnter = this.inputHandleEnter.bind(this);\r\n        this.handleButtonClick = this.handleButtonClick.bind(this);\r\n    }\r\n\r\n    inputEmailHandle(event){\r\n        this.setState({email: event.target.value});\r\n    }\r\n\r\n    inputPassHandle(event){\r\n        this.setState({pass: event.target.value});\r\n    }\r\n\r\n    inputUriHandle(event){\r\n        this.props.changeUri(event.target.value);\r\n    }\r\n\r\n    inputHandleEnter(event){\r\n        if(event.keyCode == 13){\r\n            this.requestAuth();\r\n        }\r\n    }\r\n\r\n    handleButtonClick(){\r\n        this.requestAuth();\r\n    }\r\n\r\n    requestAuth(){\r\n        this.props.handleAuth(this.state.email, this.state.pass);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"auth-global\">\r\n                <div className=\"auth-container\">\r\n                    <div className=\"auth-inputContainer\">\r\n                        <InputText label=\"Username\" handleInput={this.inputEmailHandle} value={this.state.email} handleEnter={this.inputHandleEnter}/>\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <InputText label=\"Password\" handleInput={this.inputPassHandle} value={this.state.pass} handleEnter={this.inputHandleEnter}/>\r\n                        <br />\r\n                        <br />\r\n                        <br />\r\n                        <InputText label=\"Server URL\" handleInput={this.inputUriHandle} value={this.props.uri} handleEnter={this.inputHandleEnter}/>\r\n                    </div>\r\n                    <button className=\"auth-button\" onClick={this.handleButtonClick}>Login</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Headers from './Header'\r\nimport SearchBox from './SearchBox';\r\nimport Auth from './Auth';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      db: 8,\r\n      nImports: 0,\r\n      token: null,\r\n      serverURI: \"http://192.168.99.100:3100/\"\r\n    }\r\n    this.dbCheck = this.dbCheck.bind(this);\r\n    this.handleChangeUri = this.handleChangeUri.bind(this)\r\n    this.handleAuth = this.handleAuth.bind(this);\r\n  }\r\n\r\n  dbCheck() {\r\n    if(this.state.token == null) return;\r\n    fetch(this.state.serverURI+'dbstatus', {\r\n      crossDomain: true,\r\n      method: 'GET',\r\n      headers: { 'Content-type': 'application/json' }\r\n    })\r\n      .then((response) => {\r\n        return response.json()\r\n      })\r\n      .then((reponseJson) => {\r\n        let status = parseInt(reponseJson.status);\r\n        let n = 0;\r\n        if (status == 1) {\r\n          n = reponseJson.n;\r\n        }\r\n        this.setState({\r\n          db: status,\r\n          nImports: n\r\n        });\r\n      }).catch(() => {\r\n        this.setState({\r\n          db: 8\r\n        });\r\n      }\r\n      )\r\n  }\r\n\r\n  handleAuth(email, pass){\r\n    var data = new FormData();\r\n    data.append(\"client_id\", 2);\r\n    data.append(\"client_secret\", 'U8Bvu2RPtxkuA3dU7sLkrCQ4ASK8jGrZaJOlPLLy');\r\n    data.append(\"grant_type\", 'password');\r\n    data.append(\"username\", \"picpay@picpay.com\");\r\n    data.append(\"password\", \"admin\");\r\n    data.append(\"scope\", \"\");\r\n    fetch(this.state.serverURI+'oauth/token', {\r\n      crossDomain: false,\r\n      method: 'POST',\r\n      headers: {'accept': 'application/json', 'mode': \"no-cors\"},\r\n      body: data\r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n    var db = setInterval((event) => {\r\n      this.dbCheck();\r\n    }, 1000);\r\n  }\r\n\r\n  handleChangeUri(uri){\r\n    this.setState({\r\n      serverURI: uri\r\n    })\r\n  }\r\n\r\n  render() {\r\n    let renderObject\r\n    if(this.state.token){\r\n      renderObject = <section className=\"app\">\r\n        <Headers db={this.state.db} n={this.state.nImports} />\r\n        <SearchBox db={this.state.db} serverURI={this.state.serverURI}/>\r\n      </section>\r\n    }else{\r\n      renderObject = <Auth handleAuth={this.handleAuth} uri={this.state.serverURI} changeUri={this.handleChangeUri} />;\r\n    }\r\n    return (\r\n      renderObject\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}